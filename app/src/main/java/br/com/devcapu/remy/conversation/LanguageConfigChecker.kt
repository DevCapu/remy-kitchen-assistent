package br.com.devcapu.remy.conversation

import android.app.Activity
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import android.util.Log
import java.util.Locale
import java.util.TimeZone
import kotlin.collections.any
import kotlin.collections.filter
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.let
import kotlin.ranges.until
import kotlin.text.appendLine
import kotlin.text.equals
import kotlin.text.startsWith
import kotlin.text.uppercase

class LanguageConfigChecker {

    companion object {
        private const val TAG = "LanguageConfigChecker"

        fun checkPortugueseConfiguration(context: Context) {
            Log.i(TAG, "=== VERIFICA√á√ÉO COMPLETA DE CONFIGURA√á√ÉO DE PORTUGU√äS ===")

            checkSystemLanguage(context)
            checkAvailableLocales()
            checkSpeechRecognitionLanguages(context)
            checkRegionalSettings(context)
            checkGoogleServices(context)
        }

        private fun checkSystemLanguage(context: Context) {
            Log.i(TAG, "--- 1. IDIOMA DO SISTEMA ---")

            val defaultLocale = Locale.getDefault()
            Log.i(TAG, "Idioma padr√£o: ${defaultLocale.language}")
            Log.i(TAG, "Pa√≠s padr√£o: ${defaultLocale.country}")
            Log.i(TAG, "Locale completo: $defaultLocale")
            Log.i(TAG, "Nome do idioma: ${defaultLocale.displayLanguage}")
            Log.i(TAG, "Nome do pa√≠s: ${defaultLocale.displayCountry}")

            val isPortuguese = defaultLocale.language.equals("pt", ignoreCase = true)
            Log.i(TAG, "√â portugu√™s? $isPortuguese")

            if (isPortuguese) {
                when (defaultLocale.country.uppercase()) {
                    "BR" -> Log.i(TAG, "‚úÖ Portugu√™s do Brasil configurado")
                    "PT" -> Log.i(TAG, "‚úÖ Portugu√™s de Portugal configurado")
                    else -> Log.i(TAG, "‚ö†Ô∏è Portugu√™s gen√©rico configurado")
                }
            } else {
                Log.w(TAG, "‚ùå Portugu√™s N√ÉO est√° configurado como idioma principal")
            }

            val config = context.resources.configuration
            val appLocale = config.locales.get(0)
            Log.i(TAG, "Locale da aplica√ß√£o: $appLocale")
        }

        private fun checkAvailableLocales() {
            Log.i(TAG, "--- 2. LOCALES DISPON√çVEIS ---")

            val availableLocales = Locale.getAvailableLocales()
            val portugueseLocales = availableLocales.filter {
                it.language.equals("pt", ignoreCase = true)
            }

            Log.i(TAG, "Total de locales dispon√≠veis: ${availableLocales.size}")
            Log.i(TAG, "Locales de portugu√™s encontrados: ${portugueseLocales.size}")

            portugueseLocales.forEach { locale ->
                Log.i(TAG, "  ‚Ä¢ $locale - ${locale.displayName}")
            }

            if (portugueseLocales.isNotEmpty()) {
                Log.i(TAG, "‚úÖ Portugu√™s est√° dispon√≠vel no sistema")
            } else {
                Log.w(TAG, "‚ùå Portugu√™s N√ÉO encontrado nos locales dispon√≠veis")
            }
        }

        fun checkSpeechRecognitionLanguages(context: Context) {
            Log.i(TAG, "--- 3. RECONHECIMENTO DE VOZ ---")

            val isAvailable = SpeechRecognizer.isRecognitionAvailable(context)
            Log.i(TAG, "Reconhecimento de voz dispon√≠vel: $isAvailable")

            if (!isAvailable) {
                Log.e(TAG, "‚ùå Reconhecimento de voz N√ÉO est√° dispon√≠vel")
                return
            }

            val intent = Intent(RecognizerIntent.ACTION_GET_LANGUAGE_DETAILS)
            context.sendOrderedBroadcast(
                intent,
                null,
                object : BroadcastReceiver() {
                    override fun onReceive(context: Context?, intent: Intent?) {
                        val supportedLanguages =
                            intent?.getStringArrayListExtra(RecognizerIntent.EXTRA_SUPPORTED_LANGUAGES)
                        val preferredLanguage =
                            intent?.getStringExtra(RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE)

                        Log.i(TAG, "Idioma preferido: $preferredLanguage")
                        Log.i(TAG, "Total de idiomas suportados: ${supportedLanguages?.size ?: 0}")

                        supportedLanguages?.let { languages ->
                            val portugueseLanguages = languages.filter {
                                it.startsWith("pt", ignoreCase = true)
                            }

                            Log.i(
                                TAG,
                                "Idiomas portugueses suportados: ${portugueseLanguages.size}"
                            )
                            portugueseLanguages.forEach { lang ->
                                Log.i(TAG, "  ‚Ä¢ $lang")
                            }

                            if (portugueseLanguages.isNotEmpty()) {
                                Log.i(TAG, "‚úÖ Portugu√™s est√° dispon√≠vel para reconhecimento de voz")
                            } else {
                                Log.w(
                                    TAG,
                                    "‚ùå Portugu√™s N√ÉO est√° dispon√≠vel para reconhecimento de voz"
                                )
                            }

                            val hasBrazilian =
                                portugueseLanguages.any { it.equals("pt-BR", ignoreCase = true) }
                            Log.i(TAG, "pt-BR dispon√≠vel: $hasBrazilian")
                        }
                    }
                },
                null,
                Activity.RESULT_OK,
                null,
                null
            )
        }

        private fun checkRegionalSettings(context: Context) {
            Log.i(TAG, "--- 4. CONFIGURA√á√ïES REGIONAIS ---")

            val config = context.resources.configuration

            val locales = config.locales
            Log.i(TAG, "N√∫mero de locales configurados: ${locales.size()}")

            for (i in 0 until locales.size()) {
                val locale = locales.get(i)
                Log.i(TAG, "  Locale $i: $locale")

                if (locale.language.equals("pt", ignoreCase = true)) {
                    Log.i(TAG, "  ‚úÖ Portugu√™s encontrado na posi√ß√£o $i")
                }
            }


            val timeZone = TimeZone.getDefault()
            Log.i(TAG, "Timezone: ${timeZone.id}")

            val brazilianTimezones = listOf(
                "America/Sao_Paulo", "America/Manaus", "America/Fortaleza",
                "America/Recife", "America/Bahia", "America/Cuiaba"
            )

            if (brazilianTimezones.contains(timeZone.id)) {
                Log.i(TAG, "‚úÖ Timezone brasileiro detectado")
            }
        }

        private fun checkGoogleServices(context: Context) {
            Log.i(TAG, "--- 5. GOOGLE SERVICES ---")

            val googleAppPackages = listOf(
                "com.google.android.googlequicksearchbox", // Google App
                "com.google.android.gms", // Google Play Services
                "com.google.android.tts", // Google Text-to-Speech
                "com.google.android.apps.speechservices" // Google Speech Services
            )

            val packageManager = context.packageManager

            googleAppPackages.forEach { packageName ->
                try {
                    val packageInfo = packageManager.getPackageInfo(packageName, 0)
                    Log.i(TAG, "‚úÖ $packageName instalado (vers√£o: ${packageInfo.versionName})")
                } catch (e: Exception) {
                    Log.w(TAG, "‚ùå $packageName N√ÉO instalado")
                }
            }
        }

        fun showConfigurationSummary(context: Context): String {
            val defaultLocale = Locale.getDefault()
            val isPortuguese = defaultLocale.language.equals("pt", ignoreCase = true)
            val isRecognitionAvailable = SpeechRecognizer.isRecognitionAvailable(context)

            val summary = buildString {
                appendLine("üì± RESUMO DAS CONFIGURA√á√ïES")
                appendLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                appendLine("Idioma do sistema: ${defaultLocale.displayLanguage}")
                appendLine("Pa√≠s: ${defaultLocale.displayCountry}")
                appendLine("Portugu√™s configurado: ${if (isPortuguese) "‚úÖ Sim" else "‚ùå N√£o"}")
                appendLine("Reconhecimento dispon√≠vel: ${if (isRecognitionAvailable) "‚úÖ Sim" else "‚ùå N√£o"}")
                appendLine("Locale completo: $defaultLocale")

                if (!isPortuguese) {
                    appendLine()
                    appendLine("‚ö†Ô∏è A√á√ÉO NECESS√ÅRIA:")
                    appendLine("V√° em Configura√ß√µes > Idioma e regi√£o")
                    appendLine("Adicione ou selecione Portugu√™s")
                }

                if (!isRecognitionAvailable) {
                    appendLine()
                    appendLine("‚ö†Ô∏è PROBLEMA:")
                    appendLine("Reconhecimento de voz n√£o dispon√≠vel")
                    appendLine("Instale o Google App ou Google Speech Services")
                }
            }

            Log.i(TAG, summary)
            return summary
        }

        fun setPortugueseLocale(context: Context, countryCode: String = "BR") {
            Log.i(TAG, "Tentando configurar locale para pt-$countryCode")

            val locale = Locale("pt", countryCode)
            Locale.setDefault(locale)

            val config = Configuration()
            config.locale = locale

            context.resources.updateConfiguration(config, context.resources.displayMetrics)

            Log.i(TAG, "Locale configurado para: ${Locale.getDefault()}")
        }
    }
}